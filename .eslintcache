[{"F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\index.js":"1","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\App.js":"2","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\reportWebVitals.js":"3","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\Homepage.js":"4","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\NoMatch.js":"5","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\Callpage.js":"6","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\Header.js":"7","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\Messenger.js":"8","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\Alert.js":"9","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\MeetingInfo.js":"10","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\CallPageFooter.js":"11","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\CallPageHeader.js":"12","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\utils\\apiRequests.js":"13","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\utils\\apiEndpoints.js":"14","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Reducers\\MessageListReducer.js":"15","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\utils\\helpers.js":"16"},{"size":500,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":564,"mtime":1624889810968,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":1933,"mtime":1624900774895,"results":"21","hashOfConfig":"18"},{"size":494,"mtime":1624949660556,"results":"22","hashOfConfig":"18"},{"size":6320,"mtime":1624949504649,"results":"23","hashOfConfig":"18"},{"size":826,"mtime":1624951492910,"results":"24","hashOfConfig":"18"},{"size":2136,"mtime":1624949529123,"results":"25","hashOfConfig":"18"},{"size":531,"mtime":1624948425291,"results":"26","hashOfConfig":"18"},{"size":1460,"mtime":1624948941686,"results":"27","hashOfConfig":"18"},{"size":2014,"mtime":1624948718751,"results":"28","hashOfConfig":"18"},{"size":1501,"mtime":1624949548858,"results":"29","hashOfConfig":"18"},{"size":960,"mtime":1624949462124,"results":"30","hashOfConfig":"18"},{"size":146,"mtime":1624949387571,"results":"31","hashOfConfig":"18"},{"size":278,"mtime":1624949283162,"results":"32","hashOfConfig":"18"},{"size":125,"mtime":1624949420367,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10fo6t0",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\index.js",[],"F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\App.js",[],"F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\reportWebVitals.js",[],"F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\Homepage.js",["70","71"],"import { useHistory } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faVideo, faKeyboard } from \"@fortawesome/free-solid-svg-icons\";\r\nimport shortid from \"shortid\";\r\nimport \"../CSS/Homepage.scss\";\r\nimport Header from \"./Header\";\r\n\r\nconst HomePage = () => {\r\n  const history = useHistory();\r\n\r\n  const startCall = () => {\r\n    const uid = shortid.generate();\r\n    history.push(`/${uid}#init`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"home-page\">\r\n      <Header />\r\n      <div className=\"body\">\r\n        <div className=\"left-side\">\r\n          <div className=\"content\">\r\n            <h2>Premium video meetings. Now free for everyone.</h2>\r\n            <p>\r\n              We re-engineered the service we built for secure business\r\n              meetings, Google Meet, to make it free and available for all.\r\n            </p>\r\n            <div className=\"action-btn\">\r\n              <button className=\"btn green\" onClick={startCall}>\r\n                <FontAwesomeIcon className=\"icon-block\" icon={faVideo} />\r\n                New Meeting\r\n              </button>\r\n              <div className=\"input-block\">\r\n                <div className=\"input-section\">\r\n                  <FontAwesomeIcon className=\"icon-block\" icon={faKeyboard} />\r\n                  <input placeholder=\"Enter a code or link\" />\r\n                </div>\r\n                <button className=\"btn no-bg\">Join</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"help-text\">\r\n            <a href=\"\">Learn more</a> about Google Meet\r\n          </div>\r\n        </div>\r\n        <div className=\"right-side\">\r\n          <div className=\"content\">\r\n            <img src=\"https://www.gstatic.com/meet/google_meet_marketing_ongoing_meeting_grid_427cbb32d746b1d0133b898b50115e96.jpg\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default HomePage;","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\NoMatch.js",[],"F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\Callpage.js",["72","73"],"import { useEffect, useReducer, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { getRequest, postRequest } from \"../utils/apiRequests\";\r\nimport {\r\n  BASE_URL,\r\n  GET_CALL_ID,\r\n  SAVE_CALL_ID,\r\n} from \"../utils/apiEndpoints\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport \"../CSS/Callpage.scss\";\r\nimport Messenger from \"./Messenger\";\r\nimport MessageListReducer from \"../Reducers/MessageListReducer\";\r\nimport Alert from \"./Alert\";\r\nimport MeetingInfo from \"./MeetingInfo\";\r\nimport CallPageFooter from \"./CallPageFooter\";\r\nimport CallPageHeader from \"./CallPageHeader\";\r\n\r\nlet peer = null;\r\nconst socket = io.connect(\"http://localhost:4000\");\r\nconst initialState = [];\r\n\r\nconst CallPage = () => {\r\n  const history = useHistory();\r\n  let { id } = useParams();\r\n  const isAdmin = window.location.hash == \"#init\" ? true : false;\r\n  const url = `${window.location.origin}${window.location.pathname}`;\r\n  let alertTimeout = null;\r\n\r\n  const [messageList, messageListReducer] = useReducer(\r\n    MessageListReducer,\r\n    initialState\r\n  );\r\n\r\n  const [streamObj, setStreamObj] = useState();\r\n  const [screenCastStream, setScreenCastStream] = useState();\r\n  const [meetInfoPopup, setMeetInfoPopup] = useState(false);\r\n  const [isPresenting, setIsPresenting] = useState(false);\r\n  const [isMessenger, setIsMessenger] = useState(false);\r\n  const [messageAlert, setMessageAlert] = useState({});\r\n  const [isAudio, setIsAudio] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (isAdmin) {\r\n      setMeetInfoPopup(true);\r\n    }\r\n    initWebRTC();\r\n    socket.on(\"code\", (data) => {\r\n      peer.signal(data);\r\n    });\r\n  }, []);\r\n\r\n  const getRecieverCode = async () => {\r\n    const response = await getRequest(`${BASE_URL}${GET_CALL_ID}/${id}`);\r\n    if (response.code) {\r\n      peer.signal(response.code);\r\n    }\r\n  };\r\n\r\n  const initWebRTC = () => {\r\n    navigator.mediaDevices\r\n      .getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      })\r\n      .then((stream) => {\r\n        setStreamObj(stream);\r\n\r\n        peer = new Peer({\r\n          initiator: isAdmin,\r\n          trickle: false,\r\n          stream: stream,\r\n        });\r\n\r\n        if (!isAdmin) {\r\n          getRecieverCode();\r\n        }\r\n\r\n        peer.on(\"signal\", async (data) => {\r\n          if (isAdmin) {\r\n            let payload = {\r\n              id,\r\n              signalData: data,\r\n            };\r\n            await postRequest(`${BASE_URL}${SAVE_CALL_ID}`, payload);\r\n          } else {\r\n            socket.emit(\"code\", data, (cbData) => {\r\n              console.log(\"code sent\");\r\n            });\r\n          }\r\n        });\r\n\r\n        peer.on(\"connect\", () => {\r\n          // wait for 'connect' event before using the data channel\r\n        });\r\n\r\n        peer.on(\"data\", (data) => {\r\n          clearTimeout(alertTimeout);\r\n          messageListReducer({\r\n            type: \"addMessage\",\r\n            payload: {\r\n              user: \"other\",\r\n              msg: data.toString(),\r\n              time: Date.now(),\r\n            },\r\n          });\r\n\r\n          setMessageAlert({\r\n            alert: true,\r\n            isPopup: true,\r\n            payload: {\r\n              user: \"other\",\r\n              msg: data.toString(),\r\n            },\r\n          });\r\n\r\n          alertTimeout = setTimeout(() => {\r\n            setMessageAlert({\r\n              ...messageAlert,\r\n              isPopup: false,\r\n              payload: {},\r\n            });\r\n          }, 10000);\r\n        });\r\n\r\n        peer.on(\"stream\", (stream) => {\r\n          // got remote video stream, now let's show it in a video tag\r\n          let video = document.querySelector(\"video\");\r\n\r\n          if (\"srcObject\" in video) {\r\n            video.srcObject = stream;\r\n          } else {\r\n            video.src = window.URL.createObjectURL(stream); // for older browsers\r\n          }\r\n\r\n          video.play();\r\n        });\r\n        \r\n      })\r\n      .catch(() => {});\r\n  };\r\n\r\n  const sendMsg = (msg) => {\r\n    peer.send(msg);\r\n    messageListReducer({\r\n      type: \"addMessage\",\r\n      payload: {\r\n        user: \"you\",\r\n        msg: msg,\r\n        time: Date.now(),\r\n      },\r\n    });\r\n  };\r\n\r\n  const screenShare = () => {\r\n    navigator.mediaDevices\r\n      .getDisplayMedia({ cursor: true })\r\n      .then((screenStream) => {\r\n        peer.replaceTrack(\r\n          streamObj.getVideoTracks()[0],\r\n          screenStream.getVideoTracks()[0],\r\n          streamObj\r\n        );\r\n        setScreenCastStream(screenStream);\r\n        screenStream.getTracks()[0].onended = () => {\r\n          peer.replaceTrack(\r\n            screenStream.getVideoTracks()[0],\r\n            streamObj.getVideoTracks()[0],\r\n            streamObj\r\n          );\r\n        };\r\n        setIsPresenting(true);\r\n      });\r\n  };\r\n\r\n  const stopScreenShare = () => {\r\n    screenCastStream.getVideoTracks().forEach(function (track) {\r\n      track.stop();\r\n    });\r\n    peer.replaceTrack(\r\n      screenCastStream.getVideoTracks()[0],\r\n      streamObj.getVideoTracks()[0],\r\n      streamObj\r\n    );\r\n    setIsPresenting(false);\r\n  };\r\n\r\n  const toggleAudio = (value) => {\r\n    streamObj.getAudioTracks()[0].enabled = value;\r\n    setIsAudio(value);\r\n  };\r\n\r\n  const disconnectCall = () => {\r\n    peer.destroy();\r\n    history.push(\"/\");\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <div className=\"callpage-container\">\r\n      <video className=\"video-container\" src=\"\" controls></video>\r\n\r\n      <CallPageHeader\r\n        isMessenger={isMessenger}\r\n        setIsMessenger={setIsMessenger}\r\n        messageAlert={messageAlert}\r\n        setMessageAlert={setMessageAlert}\r\n      />\r\n      <CallPageFooter\r\n        isPresenting={isPresenting}\r\n        stopScreenShare={stopScreenShare}\r\n        screenShare={screenShare}\r\n        isAudio={isAudio}\r\n        toggleAudio={toggleAudio}\r\n        disconnectCall={disconnectCall}\r\n      />\r\n\r\n      {isAdmin && meetInfoPopup && (\r\n        <MeetingInfo setMeetInfoPopup={setMeetInfoPopup} url={url} />\r\n      )}\r\n      {isMessenger ? (\r\n        <Messenger\r\n          setIsMessenger={setIsMessenger}\r\n          sendMsg={sendMsg}\r\n          messageList={messageList}\r\n        />\r\n      ) : (\r\n        messageAlert.isPopup && <Alert messageAlert={messageAlert} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default CallPage;","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\Header.js",["74"],"import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faQuestionCircle,\r\n  faExclamationCircle,\r\n  faCog,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport '../CSS/Header.scss';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"logo\">\r\n        <img src=\"https://www.gstatic.com/meet/google_meet_horizontal_wordmark_2020q4_2x_icon_124_40_292e71bcb52a56e2a9005164118f183b.png\" />\r\n        <span className=\"help-text\">TEAMS</span>\r\n      </div>\r\n      <div className=\"action-btn\">\r\n        <FontAwesomeIcon className=\"icon-block\" icon={faQuestionCircle} />\r\n        <FontAwesomeIcon className=\"icon-block\" icon={faExclamationCircle} />\r\n        <FontAwesomeIcon className=\"icon-block\" icon={faCog} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Header;","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\Messenger.js",[],"F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\Alert.js",[],"F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\MeetingInfo.js",[],"F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\CallPageFooter.js",[],"F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Components\\CallPageHeader.js",["75"],"import { useState, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faUserFriends,\r\n  faCommentAlt,\r\n  faUserCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../CSS/CallPageHeader.scss\";\r\nimport { formatDate } from \"../utils/helpers\";\r\n\r\nconst CallPageHeader = ({\r\n  isMessenger,\r\n  setIsMessenger,\r\n  messageAlert,\r\n  setMessageAlert,\r\n}) => {\r\n  let interval = null;\r\n  const [currentTime, setCurrentTime] = useState(() => {\r\n    return formatDate();\r\n  });\r\n\r\n  useEffect(() => {\r\n    interval = setInterval(() => setCurrentTime(formatDate()), 1000);\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"frame-header\">\r\n      <div className=\"header-items icon-block\">\r\n        <FontAwesomeIcon className=\"icon\" icon={faUserFriends} />\r\n      </div>\r\n      <div\r\n        className=\"header-items icon-block\"\r\n        onClick={() => {\r\n          setIsMessenger(true);\r\n          setMessageAlert({});\r\n        }}\r\n      >\r\n        <FontAwesomeIcon className=\"icon\" icon={faCommentAlt} />\r\n        {!isMessenger && messageAlert.alert && (\r\n          <span className=\"alert-circle-icon\"></span>\r\n        )}\r\n      </div>\r\n      <div className=\"header-items date-block\">{currentTime}</div>\r\n      <div className=\"header-items icon-block\">\r\n        <FontAwesomeIcon className=\"icon profile\" icon={faUserCircle} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CallPageHeader;","F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\utils\\apiRequests.js",[],"F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\utils\\apiEndpoints.js",[],"F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\Reducers\\MessageListReducer.js",[],"F:\\1. Microsoft Enage'21\\VideoConnect\\client\\src\\utils\\helpers.js",[],{"ruleId":"76","severity":1,"message":"77","line":42,"column":13,"nodeType":"78","endLine":42,"endColumn":24},{"ruleId":"79","severity":1,"message":"80","line":47,"column":13,"nodeType":"78","endLine":47,"endColumn":135},{"ruleId":"81","severity":1,"message":"82","line":26,"column":40,"nodeType":"83","messageId":"84","endLine":26,"endColumn":42},{"ruleId":"85","severity":1,"message":"86","line":51,"column":6,"nodeType":"87","endLine":51,"endColumn":8,"suggestions":"88"},{"ruleId":"79","severity":1,"message":"80","line":13,"column":9,"nodeType":"78","endLine":13,"endColumn":142},{"ruleId":"85","severity":1,"message":"89","line":23,"column":16,"nodeType":"90","endLine":23,"endColumn":69},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'initWebRTC' and 'isAdmin'. Either include them or remove the dependency array.","ArrayExpression",["91"],"Assignments to the 'interval' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression",{"desc":"92","fix":"93"},"Update the dependencies array to be: [initWebRTC, isAdmin]",{"range":"94","text":"95"},[1682,1684],"[initWebRTC, isAdmin]"]